"""
Django settings for ride_with_me project.

Generated by 'django-admin startproject' using Django 3.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path
import environ
import os
import sys

ENV_PATH = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))

# set casting, default value
env = environ.Env(
    DEBUG=(bool, False),
    SESSION_LIFETIME=(int, 1209600),
    ENV=(str, 'production'),
    DB_ENGINE=(str, 'postgis'),
    STATIC_ROOT=(str, 'static'),
    LOG_FILE=(str, 'django.log'),
    EMAIL_ENGINE=(str, 'file'),
    CHANNEL_BACKEND=(str, 'redis'),
    SECRET_KEY=(str,),
    DEBUG_BAR=(bool, False),
    VAPID_PUBLIC_KEY=(str, ''),
    VAPID_PRIVATE_KEY=(str, ''),
    VAPID_ADMIN_EMAIL=(str, ''),
)

environ.Env.read_env(f'{ENV_PATH}/.env.readonly')

ENV = env('ENV')
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env('DEBUG')

ALLOWED_HOSTS = ['web', 'localhost', 'labs2.amristar.com']

# Application definition

INSTALLED_APPS = [
    'channels',
    'application.apps.ApplicationConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.gis',
    'django.contrib.postgres',
    'rest_framework',
    'rest_framework_gis',
    'debug_toolbar',
    'webpush',
]

MIDDLEWARE = [
    'debug_toolbar.middleware.DebugToolbarMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'ride_with_me.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ride_with_me.wsgi.application'
ASGI_APPLICATION = 'ride_with_me.asgi.application'

# Channel

CHANNEL_BACKENDS = {
    'redis': {
        "BACKEND": 'channels_redis.core.RedisChannelLayer',
        "CONFIG": {
            "hosts": [("redis", 6379)],
        }
    },
    'memory': {
        "BACKEND": 'channels.layers.InMemoryChannelLayer'
    }
}

CHANNEL_LAYERS = {
    "default": CHANNEL_BACKENDS[env('CHANNEL_BACKEND')]
}

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DB_ENGINES = {
    'postgis': {
        'ENGINE': 'django.contrib.gis.db.backends.postgis',

        'NAME': env("DB_NAME"),

        'USER': env('DB_USER'),

        'PASSWORD': env('DB_PASSWORD'),

        'HOST': env('DB_HOST'),

        'PORT': env('DB_PORT'),
    },
    'sqlite': {
        'ENGINE': 'django.contrib.gis.db.backends.spatialite',

        'NAME': os.path.join(BASE_DIR, f'{env("DB_NAME")}.sqlite'),

        'TEST': {
            'NAME': os.path.join(BASE_DIR, f'test_{env("DB_NAME")}.sqlite'),
        }
    },
}

DATABASES = {
    'default': DB_ENGINES[env('DB_ENGINE')]
}

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Custom User Model
AUTH_USER_MODEL = 'application.CustomUser'

# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'
UPLOADS_URL = '/uploads/'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

SESSION_COOKIE_AGE = env('SESSION_LIFETIME')

STATIC_ROOT = f'/var/www/{env("STATIC_ROOT")}/'
UPLOADS_ROOT = 'uploads/'

REST_FRAMEWORK = {
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.SessionAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
}

if ENV == 'testing':
    logging_handlers = ['file']
else:
    logging_handlers = ['console', 'file']

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
        'file': {
           'level': 'INFO',
           'class': 'logging.FileHandler',
           'filename': env('LOG_FILE'),
            },
    },
    'loggers': {
        'django': {
            'handlers': logging_handlers,
            'level': 'INFO',
        },
    },
}


def show_toolbar(request):
    # Only show toolbar in debug mode
    return env('DEBUG_BAR') and DEBUG and ENV != 'testing'


DEBUG_TOOLBAR_CONFIG = {
    "SHOW_TOOLBAR_CALLBACK": show_toolbar,
}

CSRF_COOKIE_SAMESITE = 'Strict'
SESSION_COOKIE_SAMESITE = 'Strict'
CSRF_COOKIE_HTTPONLY = True
SESSION_COOKIE_HTTPONLY = True
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'

TOMORROWIO_API_KEY = env('TOMORROWIO_API_KEY')

WEBPUSH_SETTINGS = {
   "VAPID_PUBLIC_KEY": env('VAPID_PUBLIC_KEY'),
   "VAPID_PRIVATE_KEY": env('VAPID_PRIVATE_KEY'),
   "VAPID_ADMIN_EMAIL": env('VAPID_ADMIN_EMAIL')
}

# Email Service

EMAIL_ENGINES = {
    'file': 'django.core.mail.backends.filebased.EmailBackend',
    'smtp': 'django.core.mail.backends.smtp.EmailBackend'
}

DEFAULT_FROM_EMAIL = 'noreply@amristar.com'
SERVER_EMAIL = 'noreply@amristar.com'
EMAIL_BACKEND = EMAIL_ENGINES[env('EMAIL_ENGINE')]
if env('EMAIL_ENGINE') == 'file':
    EMAIL_FILE_PATH = env('EMAIL_LOG')

if env('EMAIL_ENGINE') == 'smtp':
    EMAIL_PORT = env('EMAIL_PORT')
    EMAIL_USE_TLS = True
    EMAIL_HOST = env('EMAIL_HOST')
    EMAIL_HOST_USER = env('EMAIL_HOST_USER')
    EMAIL_HOST_PASSWORD = env('EMAIL_HOST_PASSWORD')
